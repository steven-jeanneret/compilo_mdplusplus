Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    _ELIF
    _ENDFOR
    _ENDFUNC
    _ENDIF
    _ENDWHILE
    _FOR
    _FUNC
    _IF
    _WHILE

Grammar

Rule 0     S' -> text
Rule 1     text -> line
Rule 2     text -> line newline text
Rule 3     line -> WORD
Rule 4     line -> WORD line

Terminals, with rules where they appear

WORD                 : 3 4
_ELIF                : 
_ENDFOR              : 
_ENDFUNC             : 
_ENDIF               : 
_ENDWHILE            : 
_FOR                 : 
_FUNC                : 
_IF                  : 
_WHILE               : 
error                : 
newline              : 2

Nonterminals, with rules where they appear

line                 : 1 2 4
text                 : 2 0

Parsing method: LALR

state 0

    (0) S' -> . text
    (1) text -> . line
    (2) text -> . line newline text
    (3) line -> . WORD
    (4) line -> . WORD line

    WORD            shift and go to state 3

    text                           shift and go to state 1
    line                           shift and go to state 2

state 1

    (0) S' -> text .



state 2

    (1) text -> line .
    (2) text -> line . newline text

    $end            reduce using rule 1 (text -> line .)
    newline         shift and go to state 4


state 3

    (3) line -> WORD .
    (4) line -> WORD . line
    (3) line -> . WORD
    (4) line -> . WORD line

    newline         reduce using rule 3 (line -> WORD .)
    $end            reduce using rule 3 (line -> WORD .)
    WORD            shift and go to state 3

    line                           shift and go to state 5

state 4

    (2) text -> line newline . text
    (1) text -> . line
    (2) text -> . line newline text
    (3) line -> . WORD
    (4) line -> . WORD line

    WORD            shift and go to state 3

    line                           shift and go to state 2
    text                           shift and go to state 6

state 5

    (4) line -> WORD line .

    newline         reduce using rule 4 (line -> WORD line .)
    $end            reduce using rule 4 (line -> WORD line .)


state 6

    (2) text -> line newline text .

    $end            reduce using rule 2 (text -> line newline text .)

